// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                        String              @id @default(cuid()) @unique
  email                     String              @unique
  username                  String              @db.VarChar(30)
  password                  String
  roleId                    String              @default("1")
  passwordResetToken        String?             @unique
  passwordResetTokenExpiry  DateTime?
  firstName                 String
  lastName                  String
  dateOfBirth               String
  address                   String
  profilePicture            String?
  isActive                  Boolean             @default(false)
  isSuspended               Boolean             @default(false)
  suspensionStart           DateTime?
  suspensionEnd             DateTime?
  failedLoginAttempts       Int                 @default(0)
  lastPasswordChangeAt      DateTime            @default(now())
  createdAt                 DateTime            @default(now())
  updatedAt                 DateTime            @updatedAt

  role                      Role                @relation(fields: [roleId], references: [id], onDelete: Cascade)
  securityQuestions         UserSecurityQuestion[]
  passwordHistory           PasswordHistory[]
  accessRequests            AccessRequest[]
}

model SecurityQuestion {
  id                        String              @id @default(cuid()) @unique
  question                  String              @unique

  userSecurityQuestions     UserSecurityQuestion[]
}

model UserSecurityQuestion {
  id                        String              @id @default(cuid()) @unique
  userId                    String
  securityQuestionId        String
  answer                    String

  user                      User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  securityQuestion          SecurityQuestion    @relation(fields: [securityQuestionId], references: [id], onDelete: Cascade)

  @@unique([userId, securityQuestionId]) // Ensure a user can't have the same question multiple times
}

model PasswordHistory {
  id           String   @id @default(cuid()) @unique
  userId       String   // Change to String to match User's `id` type
  oldPassword  String
  createdAt    DateTime @default(now())
  isExpired    Boolean  @default(false)

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}


model AccessRequest {
  id          String   @id @default(cuid()) @unique
  firstName   String
  lastName    String
  email       String
  address     String
  dateOfBirth String
  statusId    Int   @default(1)  
  createdAt   DateTime @default(now())
  userId      String  

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  status      Status   @relation(fields: [statusId], references: [id], onDelete: Cascade)
}

model Role {
  id   String @id @default(cuid()) @unique
  name String @unique

  user User[]
}

model Status {
  id   Int @id @default(autoincrement())
  name String @unique

  accessRequests AccessRequest[]
}

model ErrorMessage {
  id          String @id @default(cuid()) @unique
  errorCode   String @unique
  errorMessage String
  httpStatusCode Int
}