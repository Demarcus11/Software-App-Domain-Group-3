// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int @id @default(autoincrement())
  email     String @unique
  username  String @db.VarChar(30)
  password  String
  roleId    Int @default(1)
  passwordResetToken String? @unique
  passwordResetTokenExpiry DateTime?
  firstName String
  lastName String
  dateOfBirth DateTime
  address String
  profilePicture String?
  isActive Boolean @default(false)
  isSuspended Boolean @default(false)
  suspensionStart DateTime?
  suspensionEnd DateTime?
  failedLoginAttempts Int @default(0)
  lastPasswordChangeAt DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  securityQuestionId Int
  securityAnswer String

  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)
  securityQuestion SecurityQuestion? @relation(fields: [securityQuestionId], references: [id], onDelete: Cascade)
  passwordHistory PasswordHistory[]
  accessRequests AccessRequest[]
}

model SecurityQuestion {
  id Int @id @default(autoincrement())
  question String @unique
  
  users User[]
}

model PasswordHistory {
  id Int @id @default(autoincrement())
  userId Int 
  oldPassword String 
  createdAt DateTime @default(now())
  isExpired Boolean @default(false)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade) 
}

model AccessRequest {
  id Int @id @default(autoincrement())
  firstName String  
  lastName String 
  email String 
  address String 
  dateOfBirth DateTime 
  statusId Int @default(1)
  createdAt DateTime @default(now())
  userId Int

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  status Status @relation(fields: [statusId], references: [id], onDelete: Cascade)
}

model Role {
  id Int @id @default(autoincrement())
  name String @unique

  user User[]
}

model Status {
  id Int @id @default(autoincrement())
  name String @unique

  accessRequests AccessRequest[]
}